#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os, sys

import string
import random

# String containing a "pool" of characters from which they
# are picked at random to form a password
#
DEFAULT_PASSWORD_CHARS =  \
  string.digits \
  + string.ascii_letters

## {{{ typeof(obj)
def typeof(obj):
  type_str = str(type(obj))
  if type_str.startswith("<class '") and type_str.endswith("'>"):
    return type_str[8:-2]
  return type(obj).__name__
## }}}

## {{{ class Error

class Error(Exception):

  # Error message
  message = None

  def __init__(self, message):
    self.message = message

## END of class Error }}}

def generate_password(length=24, pool=DEFAULT_PASSWORD_CHARS):
  if typeof(length) != 'int':
    raise Error(f"length: invalid type {typeof(length)}")
  if length < 0:
    raise Error(f"length: value {length} is not a positive integer")
  elif length > 256:
    # Upper bounds picked at random...
    raise error(f"length: value {length} exceeds maximum of 256")

  # TODO: Check the length of the pool and ensure if hasn't
  # been passed something even ore silly?
  #
  if typeof(pool) != 'str':
    raise Error(f"pool: invalid type {typeof(pool)}")
  if len(pool) < 1:
    raise Error("pool: value must not be empty string")

  password = ''
  n = 0
  while n < length:
    n += 1
    password += pool[random.randrange(0, len(pool))]

  return password

def main(argv=sys.argv[:]):
  print(generate_password())
  return 0

if __name__ == '__main__':
  exit(main())

##
# vim: ts=2 sw=2 et fdm=marker :
##
